    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');
    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);


    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var largePlayer;
    var miniaturePlayer;
    function onYouTubeIframeAPIReady() {
      largePlayer = new YT.Player('large-player', {
        height: '480',
        width: '100%',
        videoId: '<%= j @skit.youtube_path %>',
        playerVars: {
          'autoplay': 1,
          'rel': 0,
          'showinfo': 0
        },
        events: {
          'onReady': onLargePlayerReady,
          'onStateChange': onLargePlayerStateChange
        }
      });
      miniaturePlayer = new YT.Player('miniature-player', {
        height: '300px',
        width: '100%',
        videoId: '<%= j @skit.youtube_path %>',
        playerVars: {
          'autoplay': 1,
          'rel': 0,
          'showinfo': 0
        },
        events: {
          'onReady': onMiniaturePlayerReady,
          'onStateChange': onMiniaturePlayerStateChange
        }
      });
    }
    $('#miniature-player').hide();
    $('#minipanel').hide();

    // 4. The API will call this function when the video player is ready.
    function onLargePlayerReady(event) {
      event.target.playVideo();
    }

    function onMiniaturePlayerReady(event) {
      event.target.mute();
      event.target.playVideo();
    }

    // 5. The API calls this function when the player's state changes.
    function onLargePlayerStateChange(event) {
      switch (event.data) {
        case YT.PlayerState.ENDED:
          console.log('large-player ENDED');
          miniaturePlayer.stopVideo();
          break;
        case YT.PlayerState.PLAYING:
          var largePlayerCurrentTime = largePlayer.getCurrentTime();
          miniaturePlayer.seekTo(largePlayerCurrentTime, true);
          console.log('large-player PLAYING');
          miniaturePlayer.playVideo();
          break;
        case YT.PlayerState.PAUSED:
          console.log('large-player PAUSED');
          miniaturePlayer.pauseVideo();
          break;
        case YT.PlayerState.BUFFERING:
          console.log('large-player BUFFERING');
          break;
        case YT.PlayerState.CUED:
          console.log('large-player CUED');
          break;
      }
    }

    function onMiniaturePlayerStateChange(event) {
      switch (event.data) {
        case YT.PlayerState.ENDED:
          console.log('miniature-player ENDED');
          largePlayer.stopVideo();
          break;
        case YT.PlayerState.PLAYING:
          console.log('miniature-player PLAYING');
          largePlayer.playVideo();
          break;
        case YT.PlayerState.PAUSED:
          console.log('miniature-player PAUSED');
          largePlayer.pauseVideo();
          var miniaturePlayerCurrentTime = miniaturePlayer.getCurrentTime();
          largePlayer.seekTo(miniaturePlayerCurrentTime, true);
          break;
        case YT.PlayerState.BUFFERING:
          console.log('miniature-player BUFFERING');
          break;
        case YT.PlayerState.CUED:
          console.log('miniature-player CUED');
          break;
      }

      // detection of scroll at the bottom of large-player
      var navbar_height = 70;
      var large_player_top_position = $('#large-player').offset().top;
      var large_player_height = $('#large-player').height();
      var large_player_offset_height = 70;

      var miniature_player_visible = true;
      $(window).on('scroll', function() {
        var y_scroll_pos = window.pageYOffset;
        var scroll_pos_test = - navbar_height + large_player_top_position + large_player_height - large_player_offset_height;

        if ((y_scroll_pos > scroll_pos_test) && !miniature_player_visible) {
          miniature_player_visible = true;
          $('#miniature-player').fadeIn();
          $('#minipanel').fadeIn();
          console.log('you have below the bottom of large player');
        }
        if ((y_scroll_pos < scroll_pos_test) && miniature_player_visible) {
          miniature_player_visible = false;
          $('#miniature-player').fadeOut();
          $('#minipanel').fadeOut();
          console.log('you have above the bottom of large player');
        }
      });
    }
